//program documentation
//author: Thomas Boehler
//course: cpt187
//purpose: Module 6 participation
//create date: Dec 2, 2019

package edu.cpt187.boehler.participation6;

import java.util.Scanner;



public class MainClass 
{
	//declare CONSTANTS
	public static final String[] MAIN_MENU = {"Load Inventory", "Create Order", "Quit"}; 
	public static final char[] CHAR_MAIN_MENU_OPTIONS = {'A', 'B', 'Q'};




	public static void main(String[] args) 
	{

		//local variables
		Scanner input = new Scanner (System.in);

		String userName = " ";
		char menuSelection = ' ';
		String MASTER_FILE_NAME = " ";

		//create SodOrder instance
		SodOrder mySodOrder = new SodOrder();

		//create currentInventory instance
		Inventory currentInventory = new Inventory();
		
		//create sodOrderWriter instance
		OrderWriter sodOrders = new OrderWriter("MASTER_FILE_NAME.txt");

		//welcome banner
		displayWelcomeBanner();

		//get userName
		userName = getUserName(input);

		//validate MainMenu
		menuSelection = validateMainMenu(input);

		while (menuSelection != 'Q')
		{
			if (menuSelection == 'A')
			{
				currentInventory.setLoadItems(getFileName(input));
				if (currentInventory.getRecordCount() < 0)
				{
					displayNotOpen();
				}
				else 
				{
					mySodOrder.setItemCountArray(currentInventory.getRecordCount());
				}
				menuSelection = validateMainMenu(input);
			}
			else if (menuSelection == 'B')
			{
				currentInventory.setSearchIndex(validateSearchValue(input));
				if (currentInventory.getSearchIndex() < 0)
				{
					displayNotFound();
				}
				else 
				{
					mySodOrder.setItemSelection(currentInventory.getSearchIndex());
					mySodOrder.setItemName(currentInventory.getItemNames());
					mySodOrder.setItemPrice(currentInventory.getItemPrices());
					mySodOrder.setHowMany(validateHowMany(input));
					if (mySodOrder.getInStockCount(currentInventory.getInStockCounts()) < mySodOrder.getHowMany())
					{
						displayOutOfStock();
					}
					else
					{
						mySodOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
						mySodOrder.setDiscountName(currentInventory.getDiscountNames());
						mySodOrder.setDiscountRate(currentInventory.getDiscountRates());
						mySodOrder.setDecreaseInStock(currentInventory);
						mySodOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
						sodOrders.setWriteOrder(currentInventory.getSearchIndex(), currentInventory.getItemIDs(), mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getTotalCost());
						

						if (mySodOrder.getDiscountRate() > 0.0)
						{
							displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getDiscountName(), 
									mySodOrder.getDiscountRate(), mySodOrder.getDiscountAmt(), mySodOrder.getDiscountPrice(), mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), 
									mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName());
						}
						else 
						{
							displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), 
									mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName());
						}
					}//end of else for discount
				}//end of else for item search
				menuSelection = validateMainMenu(input);
			}//end of else for menu selection B
		}//end of while !=Q

		if (mySodOrder.getTotalCost() > 0.0)
		{
			currentInventory.setLoadItems(sodOrders.getFileName(), sodOrders.getRecordCount());
			System.out.printf("%s%d",sodOrders.getFileName(), sodOrders.getRecordCount());
			displayFinalReport(currentInventory.getItemNames(), currentInventory.getOrderQuantity(), mySodOrder.getItemCounts(), currentInventory.getDiscountNames(), mySodOrder.getDiscountCounts(), 
					currentInventory.getPrizeNames(), mySodOrder.getPrizeCounts(), currentInventory.getInStockCounts());
			displayFareWelMessage(userName);
		}
		else
		{
			displayFareWelMessage(userName);
		}

		//close scanner
		input.close();
	}//end of main




	public static void displayWelcomeBanner()
	{
		System.out.println("\n____________________________________________________________");
		System.out.println("Welcome to the SodOrder program.");
		System.out.println("In this program inventory is loaded from a user specified file");
		System.out.println("then sod is ordered using a search by ID number.  If found,");
		System.out.println("how many to be purchased is validated against current instock.");
		System.out.println("Finally a discout is assigned to members or seniors,");
		System.out.println("and a reciept is displayed. After all orders have been placed");
		System.out.println("a final report of orders is displayed.\n");	 
	}//end of displayWelcomeBanner

	public static String getUserName(Scanner borrowedInput)
	{     
		System.out.print("\nPlease enter your first name: ");
		return borrowedInput.next();
	}//end of getUserName

	public static String getFileName(Scanner borrowedInput)
	{     
		System.out.println("\n\n.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*");
		System.out.print("\nPlease enter the file name for the current inventory: \n");
		return borrowedInput.next();
	}//end of getFileName

	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("\nMain Menu:");
		while (localIndex < MAIN_MENU.length)
		{
			System.out.printf("%s%s%-3s%s\n", "[", CHAR_MAIN_MENU_OPTIONS[localIndex], "]", MAIN_MENU[localIndex]);
			localIndex++;
		}//end of menu loop
		System.out.print("\nEnter your selection: ");

	}//end of displayMainMenu

	public static void displayNotOpen()
	{
		System.out.println("\n\n!!!-------------------------!!!!-------------------------!!!");
		System.out.println("The specified file could not be found, ensure the *.* format");
		System.out.println("is used (example file.txt): \n");
	}

	public static void displaySearchTarget()
	{
		System.out.println("\n\n???-------------------------????-------------------------???");
		System.out.println("Enter the item ID for the sod to be purchased:");
		System.out.print("\nEnter your selection: ");
	}

	public static void displayNotFound()
	{
		System.out.println("\n\n!!!-------------------------!!!!-------------------------!!!");
		System.out.println("!SOD NOT FOUND!");
		System.out.println("The sod ID entered was not found:\n");
	}

	public static void displayHowMany()
	{
		System.out.println("\n\n###########  ##########  ##########  ##########  ###########");
		System.out.println("Please enter how many pieces of Sod you would like to");
		System.out.println("purchase. ");
		System.out.print("\nEnter your selection: ");
	}//end of Validation

	public static void displayOutOfStock()
	{
		System.out.println("\n\n!!!-------------------------!!!!-------------------------!!!");
		System.out.println("!SOD OUT OF STOCK!");
		System.out.println("The sod ordered is currently out of stock:\n");
	}

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountPrices)
	{
		System.out.println("\n\n-__________  __________  __________  __________  __________-");
		System.out.print("\nDiscount Menu:");
		System.out.print("\nAre you either of the following: ");
		System.out.printf("%s%s%20.1f%s", "\n[A] ",  borrowedDiscountNames[0], borrowedDiscountPrices[0]*100, "%");
		System.out.printf("%s%s%20.1f%s", "\n[B] ",  borrowedDiscountNames[1], borrowedDiscountPrices[1]*100, "%");
		System.out.printf("%s%s%15.1f%s", "\n[C] ",  borrowedDiscountNames[2], borrowedDiscountPrices[2]*100, "%");
		System.out.print("\nEnter your selection: ");
	}//end of displaySodMenu

	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal,
			double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.println("\n\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$");
		System.out.printf("\n%35s", "ITEM RECEIPT");
		System.out.println("\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$");
		System.out.printf("%s%10s\n", "Your prize is: ", borrowedPrizeName);
		System.out.println("\nITEM PURCHASED:");
		System.out.printf("\n%13s%15d%10s%.2f\n", borrowedItemName, borrowedHowMany, "$" , borrowedItemPrice);
		System.out.printf("\n\n%10s%19s%.2f", "SUBTOTAL:", "$",  borrowedSubTotal);  
		System.out.printf("\n\n%s%23.1f%-10s%s%.2f", "TAX:", borrowedTaxRate*100,"%", "$", borrowedTaxAmt );
		System.out.printf("\n%10s%27s%.2f", "TOTAL COST:", "$", borrowedTotalCost);
		System.out.println("\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$");
		System.out.printf("%35s", "ITEM RECEIPT");
		System.out.println("\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$\n\n");

	}

	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, 
			double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, 
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.println("\n\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$");
		System.out.printf("\n%35s", "ITEM RECEIPT");
		System.out.println("\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$");
		System.out.printf("%s%10s", "Your prize is: ", borrowedPrizeName);
		System.out.println("\nITEM PURCHASED:");
		System.out.printf("\n%13s%15d%10s%.2f", borrowedItemName, borrowedHowMany, "$" , borrowedItemPrice);
		System.out.println("\n\nDiscount:");
		System.out.printf("%10s%17.1f%-6s%5s%.2f\n", borrowedDiscountName,  borrowedDiscountRate* 100,"%", "-$", borrowedDiscountAmt);
		System.out.printf("\n%16s%13s%.2f", "Total Discount:", "-$", borrowedDiscountPrice);
		System.out.printf("\n\n%10s%19s%.2f", "SUBTOTAL:", "$",  borrowedSubTotal);  
		System.out.printf("\n\n%s%23.1f%-10s%s%.2f", "TAX:", borrowedTaxRate*100,"%", "$", borrowedTaxAmt );
		System.out.printf("\n%10s%27s%.2f", "TOTAL COST:", "$", borrowedTotalCost);
		System.out.println("\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$");
		System.out.printf("%35s", "ITEM RECEIPT");
		System.out.println("\n$$$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$  $$$$$$$$$$$\n\n");
	}

	public static void displayFinalReport(String[] borrowedItemNames, int[] borrowedOrderQuantity, int[] borrowedItemCounts, String[] borrowedDiscountNames, 
			int[] borrowedDiscountCounts, String[] borrowedPrizeNames, int[] borrowedPrizeCounts, int[] borrowedInStockCounts)
	{
		int localIndex = 0; 
		System.out.printf("\n\n%30s\n", "FINAL REPORT");
		System.out.println("===========  ==========  ==========  ==========  ===========");
		System.out.printf("%15s%15s%13s%13s\n", "Sod Names:", "Sod Counts:", "In Stock:", "Ordered:");
		while (localIndex < borrowedItemCounts.length)
			{
				System.out.printf("%15s%15s%13s%13d\n", borrowedItemNames[localIndex], borrowedItemCounts[localIndex], borrowedInStockCounts[localIndex], borrowedOrderQuantity[localIndex]);
			localIndex++;
			}
		System.out.printf("\n%15s%25s\n", "Discount Types:", "Discounts Used:");
		localIndex = 0;
		while (localIndex < borrowedDiscountNames.length)
		{
				System.out.printf("%15s%25s\n", borrowedDiscountNames[localIndex], borrowedDiscountCounts[localIndex]);
			localIndex++;
			}
		System.out.printf("\n%15s%25s\n", "Prize Types:", "Prizes Used:");
		localIndex = 0;
		while (localIndex < borrowedPrizeCounts.length)
		{
				System.out.printf("%15s%25s\n", borrowedPrizeNames[localIndex], borrowedPrizeCounts[localIndex]);
			localIndex++;
			}
	}

	
	public static void displayFareWelMessage(String borrowedUserName)
	{
		System.out.println("\nThank you for using the sod order program");
		System.out.printf("%s%s", "goodbye! ", borrowedUserName);
	}//end of Farewell

	public static char validateMainMenu(Scanner borrowedInput) 
	{
		char localSelection = ' ';
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validation loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			System.out.println("\n!!!-------------------------!!!!-------------------------!!!");
			System.out.println("Please enter a valid menu option.");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end of ValidationLoop
		return localSelection;
	}//end of Validation

	public static int validateSearchValue(Scanner borrowedTarget)
	{
		int localSelection = 0;
		displaySearchTarget();
		localSelection = borrowedTarget.nextInt();
		//validation loop
		while (localSelection <= 0 )
		{
			System.out.println("\n!!!-------------------------!!!!-------------------------!!!");
			System.out.println("Please enter a valid sod ID.");
			displaySearchTarget();
			localSelection = borrowedTarget.nextInt();
		}//end of ValidationLoop
		return localSelection;
	}//end of Validation

	public static int validateHowMany(Scanner borrowedHowMany)
	{
		int localSelection = 0;
		displayHowMany();
		localSelection = borrowedHowMany.nextInt();
		//validation loop
		while (localSelection <= 0 )
		{
			System.out.println("\n!!!-------------------------!!!!-------------------------!!!");
			System.out.println("The number entered to be ordered was less than 0!");
			System.out.println("Please enter how many pieces of sod are to be ordered:");
			displayHowMany();
			localSelection = borrowedHowMany.nextInt();
		}//end of ValidationLoop
		return localSelection;
	}//end of Validation

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRate) 
	{
		char localDiscountMenu = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRate);
		localDiscountMenu = borrowedInput.next().toUpperCase().charAt(0);
		//validation loop
		while (localDiscountMenu != 'A' && localDiscountMenu != 'B' && localDiscountMenu != 'C')
		{
			System.out.println("\n\nPlease enter a valid discount type:");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRate);
			localDiscountMenu = borrowedInput.next().toUpperCase().charAt(0);

		}//end of Validation
		return localDiscountMenu;
	}//end of Validation






}//end of MainClass
